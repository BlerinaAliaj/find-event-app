import eventfulfrom datetime import datetime, timedeltaimport sysimport texttable as ttimport googlemapsimport webbrowser# import google_calendarfrom apiclient.discovery import buildfrom httplib2 import Httpimport osreload(sys)sys.setdefaultencoding("utf-8")gmaps = os.environ['GOOGLE_MAPS_ACCESS_TOKEN']eventful_api = os.environ['EVENTFUL_KEY']api = eventful.API(eventful_api)DEFAULT_CITY = 'San Francisco'print "Hello! Let's see if we can help you choose an event!"location = raw_input("Please enter the location you would like to search. Press 'Enter' for %s: " % DEFAULT_CITY)if len(location) == 0:    location = DEFAULT_CITYelif not location.isdigit():    location = location.title()day_search = Truewhile day_search:    # search_time=raw_input("Please enter the date you would like to search in    # format 'Month' 'Day'. Press 'Enter' for events happening Today: ")    """    The code below will accept only input that is "All","Today", "Tomorrow",    "Future", "This Week", "Next Week", and month name "October". Exact ranges    can be specified the form 'YYYYMMDD00-YYYYMMDD00',    for example '2012042500-2012042700'; the last two digits of each date in    this format are ignored.    """    date_list = ['all', 'today', 'tomorrow', 'future', 'this week', 'next week',                 'january', 'february', 'march', 'april', 'may', 'june', 'july',                 'august', 'september', 'october', 'november', 'december']    month_dictionary = {'01': "january", '02': 'february', '03': 'march',                        '04': 'april', '05': 'may', '06': 'june', '07': 'july',                        '08': 'august', '09': 'september', '10': 'october',                        '11': 'november', '12': 'december'}    correct_date = True    while correct_date:        search_time = raw_input("""Please enter the date you would like to search            in format 'Month' 'Day'. Press 'Enter' for events happening Today: """)        if len(search_time) == 0:            search_time = "Today"            correct_date = False        else:            search_time_long = search_time.split()            if len(search_time_long) > 1:                for date in date_list:                    if date == search_time_long[0].lower():                        correct_date = False                        break            else:                for date in date_list:                    if date == search_time.lower():                        correct_date = False                        break    if correct_date:        print "Input not valid!! "    events = api.call('/events/search', q='music', l=location, within=1, t=search_time, page_size=20)    if isinstance(events['events']['event'], list):        total_events = events['events']['event']    else:        total_events = [events['events']['event']]    #print total_events    new_total_events = sorted(total_events, key=lambda k: k['start_time'])    now = datetime.now()    """For each event in events_now, pull out those that match the date only.    Filter out the ones that have passed time wise    """    tab = tt.Texttable()    i = 0    events_available = False    for event in new_total_events:        i += 1        event_time = (datetime.strptime(event['start_time'], "%Y-%m-%d %H:%M:%S"))        if event_time >= now:            events_available = True            header = ['Event Number', 'Event time', 'Event name', 'Event Location']            tab.header(header)            row = [i, event_time.strftime('%Y-%m-%d %I:%M %p'), event['title'], event['venue_name']]            tab.add_row(row)        else:            print "Skipping event: %s" % event_time        if events_available:            print "Here is a list of events happening on the Date Chosen:"            s = tab.draw()            print s        else:            print "No events available on the date chosen. "            sys.exit(0)    select_event = raw_input("Would you like directions to events in the list? ")    sel_event = True    while sel_event:        if select_event.lower() == 'yes':            choose_address = int(raw_input("Please select event you want directions to! "))            event_chosen = new_total_events[choose_address-1]            dest_address = '%s, %s, %s' % (event_chosen['venue_address'], event_chosen['city_name'], event_chosen['region_name'])            print "The event address is: \n %s" % dest_address            google_dir_url = "https://www.google.com/maps/dir/current location/%s/" % dest_address            webbrowser.open(google_dir_url)            sel_event = False        elif select_event.lower() == 'no':            sel_event = False        else:            select_event = raw_input("""You did no ente a valied selection.                Would you like directions to event in the list? """)        add_to_gc = raw_input("Would you like to add event to your Google Calendar? ")        CAL = build('calendar', 'v3', http=google_calendar.get_credentials().authorize(Http()))        if add_to_gc.lower() == 'yes' and select_event.lower() == 'yes':            event_start_time = (datetime.strptime(event_chosen['start_time'], "%Y-%m-%d %H:%M:%S"))        if event_chosen['stop_time'] is None:            event_end_time = event_start_time + timedelta(hours=3)        else:            event_end_time = (datetime.strptime(event_chosen['stop_time'], "%Y-%m-%d %H:%M:%S"))        event_timezone = event_chosen['olson_path']        email_list = []        add_friend = raw_input("Would you like to invite friends to this event? ")        if add_friend.lower() == 'yes':            add_email = True            while add_email:                email_address = raw_input('Please enter email address of people you would like to invite: ')                email_list.append({'email': email_address})                another_email_address = raw_input('Would you like to invite another person? ')                if another_email_address.lower() == 'yes':                    add_email = True                else:                    add_email = False        #print email_list            EVENT = {                'summary': event_chosen['title'],                'start':  {'dateTime': event_start_time.strftime("%Y-%m-%dT%H:%M:%S"), 'timeZone': event_timezone},                'end':    {'dateTime': event_end_time.strftime("%Y-%m-%dT%H:%M:%S"), 'timeZone': event_timezone},                'attendees': email_list}            e = CAL.events().insert(calendarId='primary', sendNotifications=True, body=EVENT).execute()            print('''*** %r event added:                Start: %s                End:   %s''' % (e['summary'].encode('utf-8'),                e['start']['dateTime'], e['end']['dateTime']))        elif add_to_gc.lower() == 'yes' and not select_event.lower() == 'yes':            choose_address = int(raw_input("Please select event you would want to add to Google Calendar! "))            event_chosen = new_total_events[choose_address-1]            event_start_time = (datetime.strptime(event_chosen['start_time'], "%Y-%m-%d %H:%M:%S"))        if event_chosen['stop_time'] is None:            event_end_time = event_start_time + timedelta(hours=3)        else:            event_end_time = (datetime.strptime(event_chosen['stop_time'], "%Y-%m-%d %H:%M:%S"))            event_timezone = event_chosen['olson_path']        email_list = []        add_friend = raw_input("Would you like to invite friends to this event? ")        if add_friend.lower() == 'yes':            add_email = True            while add_email:                email_address = raw_input('Please enter email address of people you would like to invite: ')                email_list.append({'email': email_address})                another_email_address = raw_input('Would you like to invite another person? ')                if another_email_address.lower() == 'yes':                    add_email = True                else:                    add_email = False            EVENT = {                'summary': event_chosen['title'],                'start':  {'dateTime': event_start_time.strftime("%Y-%m-%dT%H:%M:%S"), 'timeZone': event_timezone},                'end':    {'dateTime': event_end_time.strftime("%Y-%m-%dT%H:%M:%S"),                'timeZone': event_timezone}, 'attendees': email_list}            e = CAL.events().insert(calendarId='primary',                sendNotifications=True, body=EVENT).execute()            print('''*** %r event added:            Start: %s            End:   %s''' % (e['summary'].encode('utf-8'),            e['start']['dateTime'], e['end']['dateTime']))        else:            print "No event entered in Google Calendar. "            another_day = raw_input("Would you like to choose another day? ")            if another_day.lower() == 'yes':                day_search = True            else:                day_search = False